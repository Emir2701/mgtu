# Шимшир Эмирджан ИУ7-13Б
# Вариант - 21

# Написать программу для демонстрации работы метода 
# пиромидальной сортировки на примере массива целых чисел.

from cheak_func import *
import timeit
import random

# вывод списка в виде кучи
def nice_print(arr):
    n = len(arr)
    count_str = 0
    while  2**count_str <= n:
        count_str += 1
    i_0 = 0
    for i in range(count_str):
        print(*arr[i_0: i_0 + 2**i ])
        i_0 += 2**i
    print()


# создает отсортированный массив, возвращает время сортировки
def array_sort(n):
	arr = [0]*n
	for i in range(n):
		arr[i] = i

	return time_check(arr)

# создает случайный массив, возвращает время сортировки
def array_random(n):
	arr = [0]*n
	for i in range(n):
		# arr[i] = random.random()
		arr[i] = random.randint(-100, 100)

	return time_check(arr)

# создает отсортированный массив в обратном направлении, возвращает время сортировки
def array_sort_reverse(n):
	arr = [0]*n
	for i in range(n):
		arr[i] = n - i

	return time_check(arr)

# измеряет время сортировки
def time_check(arr):
	start_time = timeit.default_timer() 
	arr = heapSort(arr, "<", False)
	end_time = timeit.default_timer() 
	time = end_time - start_time
	return time


# пузырек с флагом

# Реализация пирамидальной сортировки

# функция для преобразования в кучу поддерева с корневым узлом i, что является индексом в arr[]. n - размер кучи
def heap_func(arr, n, i, sort_d, is_iter):
	root = i # инициализация корня кучи
	l = 2 * i + 1   # левый дочерний узел
	r = 2 * i + 2   # правый дочерний узел
	
 
	if sort_d == "<":
		 # Проверяем существует ли левый дочерний элемент больший, чем корень
		if l < n and arr[i] < arr[l]:
			root = l

		# Проверяем существует ли правый дочерний элемент больший, чем корень
		if r < n and arr[root] < arr[r]:
			root = r
	if sort_d == ">":
		# Проверяем существует ли правый дочерний элемент меньший, чем корень
		if l < n and arr[i] > arr[l]:
			root = l

		# Проверяем существует ли правый дочерний элемент меньший, чем корень
		if r < n and arr[root] > arr[r]:
			root = r

	# Заменяем корень, если нужно
	if root != i:
		arr[i],arr[root] = arr[root],arr[i]
		if is_iter:
			print("Замена для создания кучи:")
			nice_print(arr)

		# Применяем heap_func к корню.
		heap_func(arr, n, root, sort_d, is_iter)

# Основная функция для сортировки массива заданного размера
def heapSort(arr, sort_d, is_iter):
	if is_iter:
		print("начальное состояние кучи:")
		nice_print(arr) 
	n = len(arr)

	for i in range(n, -1, -1):
		heap_func(arr, n, i, sort_d, is_iter)

	# Один за другим извлекаем элементы
	for i in range(n-1, 0, -1):
		arr[i], arr[0] = arr[0], arr[i]
		if is_iter:
			print("{:}-е извлечение вершины и добавление ее в конец массива:".format(n-i))
			nice_print(arr) 
		heap_func(arr, i, 0, sort_d, is_iter)
	return arr

def main():

	# приветствие программы
	# --------------------------------------------------------------------------------------------------
	s = "\nПирамидальная сортировка -  это метод сортировки сравнением, основанный двоичной куче.\n\n\
Двоичная куча — это двоичное дерево, в котором элементы хранятся в следующем порядке:\n\
значение в родительском узле больше (или меньше) значений в его двух дочерних узлах.\n\
Куча представлена списком.\n\n\
Алгоритм пирамидальной сортировки:\n\n\
	1) Строим кучу по возрастанию (по убыванию) из входных данных.\n\n\
	2) На данном этапе самый большой (маленький) элемент хранится в корне кучи.\n\
	Заменим его на последний элемент кучи, а затем уменьшим ее размер на 1.\n\
	преобразуем полученное дерево в кучу по возрастанию (по убыванию) с новым корнем.\n\n\
	3) Повторяем вышеуказанные шаги, пока размер кучи больше 1.\n"

	print("-"*90)
	print(s)
	print("-"*90)
	# --------------------------------------------------------------------------------------------------

	# проверки ввода данных массива
	# --------------------------------------------------------------------------------------------------
	n = correct_input("Введите количество элементов списка: ", "int+")
	arr = [0]*n
	for i in range(len(arr)):
		arr[i] = correct_input("Введите {:} элемент массива: ".format(i + 1), "int")
	sort_d = input("Введите напрвление сортировки. возрастание / убывание (< / >): ")

	while not (sort_d == "<" or sort_d == ">"):
		print("Ошибка ввода направления сортировки")
		sort_d = input("Введите напрвление сортировки. возрастание / убывание (< / >): ")
	is_iter = input("Включить режим итерационного вывода? (+ / -): ")
	while not (is_iter == "+" or is_iter == "-"):
		print("Ошибка ввода режима итерационного вывода")
		is_iter = input("Введите напрвление сортировки. возрастание / убывание (< / >): ")

	if is_iter == '+':
		is_iter = True
	else:
		is_iter = False
	# --------------------------------------------------------------------------------------------------

	# сортировка и вывод
	arr = heapSort(arr, sort_d, is_iter)
	print("Отсортированный список:")
	print(*arr)

	# ввод размерностей 
	n1 = correct_input("Введите 1-ю размерность списков: ", "int+")
	n2 = correct_input("Введите 2-ю размерность списков: ", "int+")
	n3 = correct_input("Введите 3-ю размерность списков: ", "int+")

	# расчет времени сортировок
	# ---------------------------------------
	sort_n1 = array_sort(n1)
	sort_n2 = array_sort(n2)
	sort_n3 = array_sort(n3)

	random_n1 = array_random(n1)
	random_n2 = array_random(n2)
	random_n3 = array_random(n3)

	reverse_n1 = array_sort_reverse(n1)
	reverse_n2 = array_sort_reverse(n2)
	reverse_n3 = array_sort_reverse(n3)
	# ---------------------------------------

	# вывод таблицы
	# --------------------------------------------------------------------------------------------------
	print('|' + '-'*143 + '|')
	print("|{:^35}|{:^35}|{:^35}|{:^35}|".format('', n1, n2, n3))
	print('|' + '-'*143 + '|')
	print("|{:^35}|{:^35.8}|{:^35.8}|{:^35.8}|".format('Упорядоченный список', sort_n1, sort_n2, sort_n3))
	print('|' + '-'*143 + '|')
	print("|{:^35}|{:^35.8}|{:^35.8}|{:^35.8}|".format('Случайный список', random_n1, random_n2, random_n3))
	print('|' + '-'*143 + '|')
	print("|{:^35}|{:^35.8}|{:^35.8}|{:^35.8}|".format('Упорядоченный в обратном порядке', reverse_n1, reverse_n2, reverse_n3))
	print('|' + '-'*143 + '|')
	# --------------------------------------------------------------------------------------------------


main()

