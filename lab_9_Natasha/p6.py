# Каракотова Наталья ИУ7-13Б

# Программа предназначена для определения максимального значения в указанных строках матрицы 
# и определения среднего арифметического значения максимальных значений

# Данные, принимаемы не вход программой:
# d_line – количество строк в матрице D 
# d_col – количество столбцов в матрице D
# n – количество строк, которые нужно заменить

# Переменные функций проверки введённого значения:
# text – приглашение ввода
# type_1 – тип числа, который можно использовать в данном пункте
# n – строка, которую мы проверяем на целочисленнное (и положительное) значение
# dot – массив строки, разделённой точками
# e – массив строки, разделённой е

# Переменные для вычислений:
# d – матрица D
# l – массив I, содержащий номера строк, в которых необходимо найти максимум
# r – массив R, содержащий значения максимальных элементов
# num – введённый номер строки
# maxi – текущее максимальное значение в строке
# sr – среднее арифметическое значение максимальных значений

# Проверка введённого значения
def check_num(text, type_1):
	text_1 = str(input(text))

	while True:
		# Если пустая строка
		if not text_1:
			text_1 = input(text)

		# Если нужно целое положительное число
		if type_1 == '+':
			if positive(text_1):
					return int(text_1)
			else:
				print('Введите целое положительное число.')
				text_1 = input(text)

		# Если нужно число
		elif type_1 == '':
			if is_float(text_1):
					return float(text_1)
			else:
				print('Введите число.')
				text_1 = input(text)
				

# Проверка на целое положительное:
def positive(n):
    # Если у числа есть знак
    if n[0] == '+':
        n = n[1:]
    # Число не ноль
    if n[0] == '0':
    	return False
    return n.isdigit()

# Проверка на вещественное:
def is_float(n):
	# Если у числа есть знак
    if n[0] == '-' or n[0] == '+':
        n = n[1:]
    # Разделяем по точкам
    dot = n.split('.')
    if len(dot) == 1:
    	# Разделяем по e
        e = n.split('e')
        # Если нет e
        if len(e) == 1:
            return n.isdigit()
        # Если есть e
        elif len(e) == 2:
        	# Проверяем правильную расстановку знаков и цифр в экспоненциальном виде
            return (e[0].isdigit() and
            	    e[1] and
                    ((e[1][0] in '+-' and
                     e[1][1:].isdigit()) or
                     e[1].isdigit()))
    # Если число с точкой 
    elif len(dot) == 2:
    	# Разделяем по e
        e = dot[1].split('e')
        # Если нет e
        if len(e) == 1:
            return dot[0].isdigit() and dot[1].isdigit()
        # Если есть e
        elif len(e) == 2:
        	# Проверяем расстановку знаков и цифр в экспоненциальном виде
            return (dot[0].isdigit() and
                    e[0].isdigit() and
                    e[1] and
                    (e[1][0] in '+-' and 
                     e[1][1:].isdigit() or
                     e[1].isdigit()))
    return False

# Ввод количества строк и столбцов матрицы
print()
d_line = check_num('Введите количество строк в матрице D: ', '+')
d_col = check_num('Введите количество столбцов в матрице D: ', '+')

d = []

# Заполнение матрицы
for i in range(d_line):
	d.append([])
	for j in range(d_col):
		d[i].append(check_num('Введите {:} элемент {:} строки матрицы D: '.format(j + 1, i + 1), ''))

l = []

print()

# Ввод количества строк, которые нужно заменить 
def lines(line):
    n_1 = check_num('Введите количество строк, в которых нужно найти максимальный элемент: ', '+')
    if n_1 > line:
        print('В матрице всего {:} строк.'.format(line))
        lines(line)
    return n_1

print()

n = lines(d_line)

# Проверка на существование строки с введённым номером
def mas_l(n):
    while len(l) < n:
        num = check_num('Введите номер строки, в которой нужно найти максимальный элемент: ', '+')
        if num > d_line:
            print('Строки с таким номером нет.')
            mas_l(n)
        else:
            l.append(num)
    return l

# Сортировка номеров строк 
l = sorted(mas_l(n))
l = list(set(l))
r = []

# Поиск максимума в указанных строках
for i in range(d_line):
	if i + 1 in l:
		maxi = float('-inf')
		for j in range(d_col):
			if d[i][j] > maxi:
				maxi = d[i][j]
		r.append(maxi)

sr = sum(r) / len(r)

# Вывод матрицы
print('\nМатрица после преобразований: ')
for i in range(d_line):
	for j in range(d_col):
		print('{:<10.4}'.format(d[i][j]), end='')
	print()


print('\nМассив I: ', l)
print('Массив R: ', r)
print('Среднее арифметическое значение: ', sr)

